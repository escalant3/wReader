# encoding: UTF-8

# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
#   Mayor.create(name: 'Emanuel', city: cities.first)
#


FeedItem.create({
	title: "NPAPI plug-ins in Windows 8 Metro mode",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-8425554047780116189",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-07-20T10:20:00.001-07:00",
	text: "We recently announced initial support for <a href=\"http://blog.chromium.org/2012/06/try-chrome-in-metro-mode.html\">Chrome in Windows 8 Metro mode</a>. One thing that early testers may have noticed is that some existing plug-ins don't work. These plug-ins are built using a technology called <a href=\"http://en.wikipedia.org/wiki/NPAPI\">NPAPI</a>, which, <a href=\"http://msdn.microsoft.com/en-us/library/ie/hh920753(v=vs.85).aspx\">like ActiveX</a>, is not compatible with Windows 8 Metro mode. <br /><br />Note that because <a href=\"http://blogs.adobe.com/flashplayer/2010/06/flash_player_and_chrome_go.html\">Adobe Flash Player</a> and Chrome’s <a href=\"http://chrome.blogspot.com/2010/11/pdf-goodness-in-chrome.html\">PDF viewer</a> have both been bundled as Pepper plug-ins running in a sandboxed environment in Chrome, these two widely-used plug-ins will continue to work in Windows 8 Metro mode on all websites. <br /><br />We’ve noticed that other than Flash and PDF, usage of plug-ins has been steadily decreasing over the past few years, to the point where a relatively small percentage of our users load any of these plug-ins at all. The following table shows some well-known plug-ins along with the percentage of active Chrome users who instantiated that plug-in during a 28-day window: <br /><br /> <table><tr><td><strong>Plug-in name</strong></td><th>Percentage</th></tr><tr><td>Flash Player </td><td align=right>99.9%</td></tr><tr><td>Chrome PDF Viewer</td><td align=right>58%</td></tr><tr><td>Silverlight</td><td align=right>26%</td></tr><tr><td>Java</td><td align=right>12%</td></tr><tr><td>QuickTime</td><td align=right>4%</td></tr><tr><td>Windows Media Player</td><td align=right>2%</td></tr></table> <br />This data came from more than 20 million Chrome users who have opted in to share non-identifying <a href=\"http://support.google.com/chrome/bin/answer.py?hl=en&answer=96817\">usage statistics</a> with Google, which are aggregated to understand how Chrome features are used. <br /><br />We expect NPAPI plug-in usage to continue declining over time, especially since plug-ins can’t run on most phones and tablets. If the trends continue, we look forward to the day when NPAPI can retire peacefully to the countryside. <br /><br /><span class='post-author'>Posted by Carlos Pizano, Software Engineer and Metro Gnome</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-8425554047780116189?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Introducing getUserMedia and the Javascript Gamepad API",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-4110924414353433754",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-07-09T10:10:00.000-07:00",
	text: "Today’s <a href=\"https://www.google.com/landing/chrome/beta/\">Chrome Beta release</a> includes two new APIs: the getUserMedia API and the Gamepad Javascript API. <br /><br />The <a href=\"http://www.html5rocks.com/en/tutorials/getusermedia/intro/\">getUserMedia API</a> lets users grant web apps access to their camera and microphone without a plug-in. This is the first step in enabling high quality video and audio communication as part of <a href=\"http://www.webrtc.org/\">WebRTC</a>, a powerful new real-time communications standard for the open web platform. <br /><br />In addition, getUserMedia can be combined with other platform features like CSS filters and WebGL to render effects as the <video> is captured. For example, you can <a href=\"http://www.youtube.com/watch?v=PNzmXDa1JLA\">rotate the video and add hipstery filters</a>, <a href=\"http://www.soundstep.com/blog/experiments/jsdetection/\">play a xylophone with motion detection</a>, <a href=\"http://neave.github.com/face-detection/\">try on glasses with face detection</a>, and <a href=\"http://neave.com/webcam/html5/\">step into a photobooth</a> with crazy effects like “Snow” and “Fire.” <a href=\"https://plus.google.com/113817074606039822053/posts\">Follow WebRTC on Google+</a> for the occasional awesome demo update, and check out the video below for an in depth discussion of WebRTC at Google I/O. <br /><br /><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/E8C8ouiXHHk\" width=\"560\"></iframe><br /><br />The Gamepad Javascript API helps developers access input from any standard gamepad connected to the user’s machine, creating a richer gameplay experience with these controllers. Gamepad access was made available for NaCl in May, and since its introduction has enabled awesome games like <a href=\"https://chrome.google.com/webstore/detail/hdahlabpinmfcemhcbcfoijcpoalfgdn\">AirMech</a>. We’re excited to see what developers will create in JavaScript. <br /><br /><span class=\"post-author\">Tommy Widenflycht, Software Engineer and Real-Time Communicator</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-4110924414353433754?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Chrome@IO",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-82848276075449487",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-06-26T11:41:00.000-07:00",
	text: "Google I/O is just around the corner and all of us in the Chrome team are looking forward to sharing with you what’s new with the open web.<br /><br />Starting from June 27, we’ve planned more than 20 <a href=\"https://developers.google.com/events/io/sessions#chrome\">sessions</a> and <a href=\"https://developers.google.com/events/io/code-labs\">code labs</a>.  If you are not joining us in San Francisco, you can still watch some of these sessions by attending one of the 350+ I/O <a href=\"https://developers.google.com/events/io/io-extended\">extended events</a> or by simply tuning in to the <a href=\"https://developers.google.com/events/io\">livestream</a> from anywhere in the world. You can also watch these sessions when you are on the move by downloading the <a href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.iosched&referrer=utm_source%3Dgoogle%26utm_medium%3Dioliveblogpost%26utm_campaign%3Dio2012\">Google I/O mobile app</a>.<br /><br />All other sessions are going to be recorded. Videos from these sessions will be available after the conference on <a href=\"https://developers.google.com/live/\">Google Developers Live</a> and the <a href=\"https://developers.google.com/events/io/sessions\">I/O website</a>.<br /><br />Finally, you can follow our <a href=\"https://plus.google.com/102860501900098846931/posts\">Google+ page</a> and <a href=\"http://twitter.com/#!/chromiumdev\">Twitter account</a> for more behind the scenes coverage. <br />Let the fun begin!<br /><br /><span class=\"post-author\">Posted by Brian Rakowski, (Miami) Vice President Product Management </span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-82848276075449487?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Put your extensions on a diet with event pages",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-5936154504139095096",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-06-21T09:51:00.001-07:00",
	text: "If you’re a Chrome extensions power user, you may be familiar with a task manager that looks like this:<br /><br /><a href=\"http://2.bp.blogspot.com/-OlcaSfyQew4/T-KJ4xrLVRI/AAAAAAAAAaU/_GVO6cJX5E4/s1600/Screen+shot+2012-06-20+at+7.41.07+PM.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"232\" src=\"http://2.bp.blogspot.com/-OlcaSfyQew4/T-KJ4xrLVRI/AAAAAAAAAaU/_GVO6cJX5E4/s400/Screen+shot+2012-06-20+at+7.41.07+PM.png\" width=\"400\" /></a><br /><br />That’s a lot of extensions running! Most of the time, they’re probably just sitting idle, waiting for the user to interact with them. Do they really need to be running and using your memory all the time?<br /><br />Over the last several months, we've been working on a new feature for the extension system called <i>Event Pages</i> that we think will help reduce the memory used by these idle extensions.  <br /><br /><b>How They Work </b><br /><br />Event pages are an evolution of <a href=\"http://code.google.com/chrome/extensions/background_pages.html\">background pages</a>, with one major improvement: rather than running in the background all the time, an event page only runs when it is handling events. Once an event page becomes idle, it is unloaded, freeing memory until the next time it’s needed. Learn more from the <a href=\"http://code.google.com/chrome/extensions/dev/event_pages.html\">event page documentation</a>.<br /><br />To help event pages support some important use cases, we’re also developing a few new APIs.<br /><ul><li>The <a href=\"http://code.google.com/chrome/extensions/dev/alarms.html\">alarms API</a> allows an extension to wake itself up at set times, to support features like periodically syncing data to the cloud. </li><li>Some <a href=\"http://code.google.com/chrome/extensions/dev/runtime.html\">new events</a> let extensions know when they have been installed, or when their event page is being unloaded. </li><li>A <a href=\"http://code.google.com/chrome/extensions/dev/declarativeWebRequest.html\">declarative version</a> of the webRequest API lets extensions do network interception without the need for a background page at all. </li></ul><b>Try it Out </b><br /><br />We plan to release event pages to Chrome’s beta and stable channels late this summer, but you can start experimenting with them on the <a href=\"ttp://dev.chromium.org/getting-involved/dev-channel\">developer channel</a> today. Try converting your overweight extension to event pages, and <a href=\"https://groups.google.com/a/chromium.org/group/chromium-extensions/topics\">let us know</a> how it works.<br /><span class=\"post-author\"><br /></span><br /><span class=\"post-author\">Posted by Matt Perry, Software Engineer</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-5936154504139095096?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Customer Feedback Improvements in the Chrome Web Store",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-5313292313183057800",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-06-20T14:36:00.000-07:00",
	text: "As Chrome Web Store apps and extensions have become more popular, users have been generating a large amount of reviews and feedback for developers. Until now, there was no way to separate a user’s review of an app’s features and quality from developer-focused feedback, such as the reporting of bugs, feature requests, and general questions.<br /><br />To improve the feedback loop between developers and users, we’ve added a new way to get feedback directly from your users:<br /><br /><a href=\"http://3.bp.blogspot.com/-3DWdg9KSk04/T-JAjMmsNjI/AAAAAAAAAaA/NpI0Pyi9hg4/s1600/Screen+shot+2012-06-20+at+11.49.50+AM.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"240\" src=\"http://3.bp.blogspot.com/-3DWdg9KSk04/T-JAjMmsNjI/AAAAAAAAAaA/NpI0Pyi9hg4/s400/Screen+shot+2012-06-20+at+11.49.50+AM.png\" width=\"400\" /></a><br /><br />This feature provides a clean separation between reporting bugs and compatibility issues to developers and the rating / comments users can leave in the store relating to the functionality and usefulness of a given app. The contents of the feedback forum are publicly visible to everyone, which helps to cut down on duplicate issue reporting.<br /><br /><b>Turning the Feedback Feature On</b><br /><br />In order to enable this feature for your store items, go to your developer dashboard and click on the “Edit your User Feedback preferences” option (highlighted below):<br /><br /><a href=\"http://2.bp.blogspot.com/-SrM_59XLCls/T-JBA7GQFmI/AAAAAAAAAaI/i8mFKfB993g/s1600/Screen+shot+2012-06-20+at+11.50.06+AM.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"212\" src=\"http://2.bp.blogspot.com/-SrM_59XLCls/T-JBA7GQFmI/AAAAAAAAAaI/i8mFKfB993g/s400/Screen+shot+2012-06-20+at+11.50.06+AM.png\" width=\"400\" /></a><br /><br /><b>Engaging With Your Users</b><br /><br />You should encourage your app’s users to engage with you via the new feedback feature by placing links to your app’s feedback page directly on your site after you’ve activated it. To do so, use the url format “https://chrome.google.com/webstore/support/yourappid<your_app_id>”. </your_app_id>Doing so will increase the likelihood that users will discover the feature and reinforce the idea that you actively support it.<br /><br />We hope that this new feature will give users a better experience in reporting issues, requesting new features, and asking questions. Similarly, developers will now have a much easier forum to use to have an ongoing social conversation about their products.<br /><br />If you have any questions about this new feature, you can reach us on our <a href=\"http://groups.google.com/a/chromium.org/group/chromium-apps/topics\">developer forum</a>.<br /><span class=\"post-author\"><br /></span><br /><span class=\"post-author\">Posted by Siddhartha Saha, Software Engineer</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-5313292313183057800?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Develop for Good and have a chance to win tickets to I/O 2013!",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-2127121433423862857",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-06-14T16:57:00.000-07:00",
	text: "<i>Cross-posted from the <a href=\"http://www.blogger.com/%E2%80%9Dhttp://googledevelopers.blogspot.com/2012/06/develop-for-good-and-have-chance-to-win.html%E2%80%9D\">Google Developers Blog</a></i><br /><br />Would you like to use your coding skills to significantly improve the world, and have the chance to win tickets to Google I/O 2013 for your efforts? <a href=\"http://google.org/\">Google.org</a> has joined forces with the <a href=\"https://developers.google.com/events/io/io-extended\">I/O Extended</a> team to bring you the <a href=\"http://goo.gl/s4Mib\">\"Develop for Good\" Hackathon</a>. We’re looking for hackers to tackle issues around repressive regimes, engaging citizens in politics and enabling us all to be greener!<br /><br />Almost anyone can participate in the hackathon from just about anywhere in the world. Many of the Extended events are <a href=\"https://developers.google.com/events/io/io-extended\">already hosting hackathons</a>, so we encourage you to find an event near you or start your own. If you’re in the San Francisco Bay Area, Google.org will be hosting a ‘Develop for Good’ hackathon at the <a href=\"http://goo.gl/AiNSi\">San Francisco I/O Extended event</a>.<br /><br />Here are the three challenges developed by the Google teams:<br /><ol><li><a href=\"https://sites.google.com/site/ioextended12/agenda-overview/hackathons/googleideas\">Google Ideas</a>: Conflict reporting for blackout situations in repressive regimes.</li><li><a href=\"https://sites.google.com/site/ioextended12/agenda-overview/hackathons/elections/\">Google Politics & Elections</a>: Citizen Engagement for Politics & Elections.</li><li><a href=\"https://sites.google.com/site/ioextended12/agenda-overview/hackathons/green\">Google Green</a>: Help us all be a little bit greener!</li></ol>Developers can start preparing, and even coding, right away and then bring their ideas to the Extended event Hackathons during I/O (though we welcome you to participate even if you’re unable to attend an event). Pencils down on Friday night—hacks must be submitted by 11:59 p.m. (PDT) on June 29, 2012 via <a href=\"https://docs.google.com/spreadsheet/viewform?formkey=dFY2R0NKSE1uSS1fVTRFYmZuQ19ObkE6MQ\">this form</a>.<br /><br />After June 29th a team of Googlers will judge the submissions for each challenge. We will announce the winning hacks for each challenge by about August 1st, 2012. There will be one winning hack selected from each challenge area, and each will receive up to 5 tickets to I/O 2013, along with the honorary title of \"Google Developer for Good, 2012\". In addition, we’ll award one of the <a href=\"http://chrome.blogspot.com/2012/05/next-step-in-chrome-os-journey.html\">latest Chromebooks</a> to each member of the team producing the best web app across all three challenges.<br /><br />If you are interested in getting involved, we recommend signing up for an <a href=\"https://developers.google.com/events/io/io-extended\">I/O Extended event</a> near you and then checking with the organizer to see whether a hackathon is part of the agenda  -- or hosting your own Extended event and hackathon!<br /><br />Find further details of the challenges, prizes, submission guidelines and <a href=\"https://sites.google.com/site/ioextended12/home/google-develop-for-good/hackathon-rules\">hackathon rules</a> on the <a href=\"https://sites.google.com/site/ioextended12/home/google-develop-for-good/\">I/O Extended organizers' website</a>.<br /><span class=\"post-author\"><br /></span><br /><span class=\"post-author\">Posted by Anna de Paula Hanika, Product Marketing Manager </span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-2127121433423862857?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Make your website faster with PageSpeed Insights",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-7675621234239287428",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-06-12T15:33:00.000-07:00",
	text: "<i>Cross-posted from the <a href=\"http://googledevelopers.blogspot.com/2012/06/make-your-website-faster-with-pagespeed.html\">Google Developers Blog</a>.</i><br /><br />A year ago, we released a preview of the PageSpeed Insights Chrome Developer Tools extension, which analyzes the performance of web pages and provides suggestions to make them faster. Today, we’re releasing version 2.0 of the <a href=\"https://chrome.google.com/webstore/detail/gplegfbjlmmehdoakndmohflojccocli\">PageSpeed Insights</a> extension, available in the <a href=\"http://www.blogger.com/chrome.google.com/webstore\">Chrome Web Store</a>. <br /><br />PageSpeed Insights analyzes all aspects of a web page load and points out the specific things you can do to make your page faster. For instance, PageSpeed Insights can inform you about an expensive JavaScript call that blocks the renderer for too long, remind you about that new photo on the front page of your web site that you might have forgotten to resize or optimize, or recommend changing the way you load third-party content so it no longer blocks the page load.<br /><br />PageSpeed Insights for Chrome is a Chrome Developer Tools extension that analyzes all aspects of the page load, including resources, network, DOM, and the timeline. If you're already familiar with Chrome Developer Tools, you'll find that PageSpeed Insights integrates with a toolset you're already using.<br /><br /><a href=\"http://4.bp.blogspot.com/-PvXlz4eYzsA/T9fNRB7OICI/AAAAAAAAAZ0/z3rfnsULR0c/s1600/insights.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"200\" src=\"http://4.bp.blogspot.com/-PvXlz4eYzsA/T9fNRB7OICI/AAAAAAAAAZ0/z3rfnsULR0c/s320/insights.png\" width=\"320\" /></a><br /><br />Using technologies like <a href=\"https://developers.google.com/native-client/\">Native Client</a>, PageSpeed Insights is able to run the open-source <a href=\"http://code.google.com/p/page-speed/\">PageSpeed Insights SDK</a> securely and with the performance of native code. Leveraging the Insights SDK enables the Chrome extension to automatically optimize the images, CSS, JavaScript and HTML resources on your web page and provide versions of those resources that you can easily deploy on your website.<br /><br />We hope you’ll give <a href=\"https://chrome.google.com/webstore/detail/gplegfbjlmmehdoakndmohflojccocli\">PageSpeed Insights for Chrome</a> a try and start optimizing your web pages today. We’d love to hear from you, as always. Please try PageSpeed Insights for Chrome, and give us feedback on our <a href=\"https://groups.google.com/forum/?fromgroups#!forum/page-speed-discuss\">mailing list</a> with questions, comments, and new features you’d like to see.<br /><span class=\"post-author\"><br /></span><br /><span class=\"post-author\">Posted by Libo Song and Bryan McQuade, Software Engineers </span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-7675621234239287428?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "New Developer Features in the Chrome Web Store",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-8237954497316519767",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-06-12T12:05:00.000-07:00",
	text: "During these last few weeks, the <a href=\"http://chrome.google.com/webstore\">Chrome Web Store</a> team has been focused on launching the store in more countries and building some new features for developers that can help them reach and engage with more users.<br /><br /><b>New Countries </b><br /><br />We recently launched the Chrome Web Store in six additional countries: Turkey, Ukraine, Egypt, Saudi Arabia, Morocco and the United Arab Emirates. This means that developers can now distribute and sell their apps to millions of additional potential users.<br /><br />To be successful in these new markets, we highly recommend <a href=\"https://developers.google.com/chrome/web-store/docs/i18n\">localizing your apps</a> in as many languages as possible. This will make them more accessible to users around the world, and more likely to be promoted in the 42 countries the store is available in.<br /><br /><b>New Offline Apps Collection</b><br /><br />To recognize developers who have made their apps work offline - and help users find them - we created a <a href=\"https://chrome.google.com/webstore/category/collection/offline_enabled\">special collection</a> just to highlight them in the store.<br /><br /><b id=\"internal-source-marker_0.5972786617930979\" style=\"-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; color: black; font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\"><img height=\"283\" src=\"https://lh6.googleusercontent.com/fypy5wIs2Q3jYDRd2JaRJ-uezKZ0OW2erdFf1SJd08f0MMUM0XwCttUFzy66r6E-yqy4RDpT7o8LwBBnwyUMVCqllcgy_VVkfMyb6tUmoV4n0vf-sE8\" width=\"320\" /></b><br /><br />If you are a developer, getting your app listed in this collection is as simple as adding the <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">offline_enabled</span> flag to your app’s <a href=\"https://developers.google.com/chrome/apps/docs/developers_guide#manifest\">manifest file</a> (note: to avoid negative user feedback, please ensure that your app does indeed work well offline before you do this).<br /><br /><b>Better Information in the Developer Dashboard </b><br /><br />One of the common requests we’ve received from developers, is that they’d like better insight into how well their apps are doing in the store. Many of you would especially like to know how many times your apps and extensions are being viewed vs. how many installations are occurring.<br /><br />To help you with your data needs, we’ve created a new graph view to help you understand the performance of your apps. To make this data more accessible, you can easily download it as a CSV file.   Currently, we provide 90 days of history information.<br /><br /><b id=\"internal-source-marker_0.5972786617930979\" style=\"-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; color: black; font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\"><img height=\"137\" src=\"https://lh6.googleusercontent.com/R7rtIDsZgC1v96YUdgFE4r8tndjIzBFW0IgS9dZeLiDiT9Lfr4DncsLc8WnFUteOm4-nhfCj6g2XSWg8ZX_ZaYfaTRKBlmAjpdbYgYRBZHrIgGPTuNk\" width=\"320\" /></b><br /><br />In the near future, we plan to further refine this feature - for example, we may increase the historical period for which data is available and add other features to help you understand how your apps are being adopted.<br /><br />If you have any questions about these new features, you can reach us on our <a href=\"http://groups.google.com/a/chromium.org/group/chromium-apps/topics\">developer forum</a>.<br /><br /><span class=\"post-author\">Posted by Joe Marini, Developer Advocate </span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-8237954497316519767?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "A Tale Of Two Pwnies (Part 2)",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-8265104863528938533",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-06-11T12:21:00.000-07:00",
	text: "When we <a href=\"http://chrome.blogspot.com/2012/03/pwnium-great-exploits-fast-patches.html\">wrapped up</a> our recent Pwnium event, we praised the creativity of the submissions and resolved to provide write-ups on how the two exploits worked. We already covered <a href=\"http://blog.chromium.org/2012/05/tale-of-two-pwnies-part-1.html\">Pinkie Pie’s submission</a> in a recent post, and this post will summarize the other winning Pwnium submission: an amazing multi-step exploit from frequent Chromium Security Reward winner Sergey Glazunov.<br /><br />From the start, one thing that impressed us about this exploit was that it involved no memory corruption at all. It was based on a so-called “Universal Cross-Site Scripting” (or UXSS) bug. The UXSS bug in question (<a href=\"https://code.google.com/p/chromium/issues/detail?id=117226\">117226</a>) was complicated and actually involved two distinct bugs: a state corruption and an inappropriate firing of events. Individually there was a possible use-after-free condition, but the exploit -- perhaps because of various memory corruption mitigations present in Chromium -- took the route of combining the two bugs to form a “High” severity UXSS bug. However, a <a href=\"http://blog.chromium.org/2012/02/pwnium-rewards-for-exploits.html\">Pwnium</a> prize requires demonstrating something “Critical”: a persistent attack against the local user’s account. A UXSS bug alone cannot achieve that.<br /><br />So how was this UXSS bug abused more creatively? To understand Sergey’s exploit, it’s important to know that Chromium implements some of its built-in functions using special HTML pages (called WebUI), hosted at origins such as <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://about</span>. These pages have access to privileged JavaScript APIs. Of course, a normal web page or web renderer process cannot just iframe or open a <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome:// URL</span> due to strict separation between <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">http[s]://</span> and <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://</span> URLs. However, Sergey discovered that iframing an invalid <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome-extension:// resource</span> would internally host an error page in the <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://chromewebdata</span> origin (<a href=\"https://code.google.com/p/chromium/issues/detail?id=117230\">117230</a>). Furthermore, this error page was one of the few internal pages that did not have a <a href=\"http://www.w3.org/TR/CSP/\">Content Security Policy</a> (CSP) applied. A CSP would have blocked the UXSS bug in this context.<br /><br />At this point, multiple distinct issues had been abused, to gain JavaScript execution in the <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://chromewebdata</span> origin.<br /><br />The exploit still had a long way to go, though, as there are plenty of additional barriers:<br /><br /><ul><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://chromewebdata</span> does not have any sensitive APIs associated with it. </li><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://a</span> is not same-origin with <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://b</span>. </li><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://*</span> origins only have privileges when the backing process is tagged as privileged by the browser process, and this tagging only happens as a result of a top-level navigation to a <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://</span> URL. </li><li>The sensitive <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://*</span> pages generally have CSPs applied that prevent the UXSS bug in question. </li></ul><br />The exploit became extremely creative at this point. To get around the defenses, the compromised <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://chromewebdata</span> origin opened a window to <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://net-internals</span>, which had an iframe in its structure. Another WebKit bug -- the ability to replace a cross-origin iframe (<a href=\"https://code.google.com/p/chromium/issues/detail?id=117583\">117583</a>) -- was used to run script that navigated the popped-up window, simply “back” to <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://net-internals</span> (<a href=\"https://code.google.com/p/chromium/issues/detail?id=117417\">117417</a>). This caused the browser to reassess the <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://net-internals</span> URL as a top-level navigation -- granting limited WebUI permissions to the backing process as a side-effect (<a href=\"https://code.google.com/p/chromium/issues/detail?id=117418\">117418</a>).<br /><br />The exploit was still far from done. It was now running JavaScript inside an iframe inside a process with limited WebUI permissions. It then popped up an about:blank window and abused another bug (<a href=\"https://code.google.com/p/chromium/issues/detail?id=118467\">118467</a>) -- this time in the JavaScript bindings -- to confuse the top-level <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://net-internals</span> page into believing that the new blank window was a direct child. The blank window could then navigate its new “parent” without losing privileges (<a href=\"https://code.google.com/p/chromium/issues/detail?id=113496\">113496</a>). The first navigation was to <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://downloads</span>, which gained access to additional privileged APIs. You probably get a sense of where the exploit was headed now. It finished off by abusing privileged JavaScript APIs to download an attack DLL. The same APIs were used to cleverly “download” and run <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">wordpad.exe</span> from the local disk (thus avoiding the system-level prompt for executing downloads from the internet zone). A design quirk of the Windows operating system caused the attack DLL to be loaded into the trusted executable.<br /><br />As you can imagine, it took us some time to dissect all of this. Distilling the details into a blog post was a further challenge; we’ve glossed over the use of the UXSS bug to bypass pop-up window restrictions. The UXSS bug was actually used three separate times in the exploit. We also omitted details of various other lockdowns we applied in response to the exploit chain.<br /><br />What’s clear is that Sergey certainly earned his $60k Pwnium reward. He chained together a whopping 14[*] bugs, quirks and missed hardening opportunities. Looking beyond the monetary prize, Sergey has helped make Chromium significantly safer. Besides fixing the array of bugs, we’ve landed hardening measures that will make it much tougher to abuse <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">chrome://</span> WebUI pages in the future.<br /><br /><span class=\"post-author\">Posted by Ken Buchanan, Chris Evans, Charlie Reis and Tom Sepez, Software Engineers </span><br /><span class=\"post-author\"><br /></span><br /><span class=\"post-author\">[*]14, or thereabouts. It’s easy to lose count. </span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-8265104863528938533?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Try Chrome in Metro mode",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-3171963315444612341",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-06-07T10:00:00.000-07:00",
	text: "Back in March, we <a href=\"http://mashable.com/2012/03/12/chrome-windows-8/\">began work</a> on a <a href=\"http://go.microsoft.com/fwlink/?LinkID=243079\">Metro-style enabled desktop browser</a>, a version of Chrome that will run in both the Metro and desktop environments of Windows 8 on x86. (Chrome won’t run in WinRT, i.e. Windows 8 on ARM processors, as Microsoft is <a href=\"http://blog.mozilla.org/blog/2012/05/09/windows-on-arm-users-need-browser-choice-too/\">not allowing browsers</a> other than Internet Explorer on the platform.) If you’re running the <a href=\"http://windows.microsoft.com/en-US/windows-8/release-preview\">Release Preview of Windows 8</a>, you’ll be able to try Chrome in Metro mode in the next <a href=\"http://www.chromium.org/getting-involved/dev-channel\">Chrome Dev channel</a> release by setting it as your default browser. <br /><br /><a href=\"http://1.bp.blogspot.com/-yz2f2jkYczc/T9DdFpE0ufI/AAAAAAAAAx8/_EeWNH1YXYE/s1600/chrome_in_metro.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"286\" src=\"http://1.bp.blogspot.com/-yz2f2jkYczc/T9DdFpE0ufI/AAAAAAAAAx8/_EeWNH1YXYE/s400/chrome_in_metro.png\" width=\"500\" /></a><br /><br />The initial releases of Chrome in Metro mode will include integration with the basic Windows 8 system functionality, such as <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/hh465304.aspx#the_charms\">charms</a> and <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/hh464920.aspx#traits_3_snap_and_scale\">snap view</a>. Over the next few months, we’ll be smoothing out the UI on Metro and improving touch support, so please feel free to <a href=\"http://code.google.com/p/chromium/issues/entry?template=Defect%20report%20from%20user&labels=Type-Bug,Pri-2,Hotlist-Windows8\">file bugs</a>. We’re committed to bringing the speed, simplicity, and security of Chrome into Windows 8, and we look forward to working with you on it. <br /><br /><span class=\"post-author\">Carlos Pizano, Software Engineer and Metro Gnome</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-3171963315444612341?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Accelerated CSS Filters Landed in Chromium",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-3347903328869812110",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-06-04T12:55:00.000-07:00",
	text: "CSS filters are a powerful, easy-to-use visual effects tool for web developers. Filters can manipulate the appearance of any HTML element and can be stacked together to create unique effects -- all with a single line of CSS. Chromium GPU accelerates these filters to make them super fast. CSS filters are new in Chromium 19.<br /><br />The current set of supported filters in Chromium include many that are familiar to web developers with image processing experience, such as sepia, saturation, opacity, and blurs. If you’re a web designer looking to add dynamic visuals to your next page layout, a developer building a photo editing app, or a game developer looking for an easy way to add effects to your next title, CSS filters can help you get there easily.<br /><br /><div style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-ypcyZEpZtI8/T80Re2AfkZI/AAAAAAAAAZo/kc1ThbAQ_zo/s1600/Screen+shot+2012-06-04+at+12.49.44+PM.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"147\" src=\"http://4.bp.blogspot.com/-ypcyZEpZtI8/T80Re2AfkZI/AAAAAAAAAZo/kc1ThbAQ_zo/s320/Screen+shot+2012-06-04+at+12.49.44+PM.png\" width=\"320\" /></a></div><div style=\"text-align: center;\"><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">img { -webkit-filter: sepia(100%) contrast(200%) blur(5px) } </span></div><br />GPU acceleration of these filters brings their performance to the point where they can be used for animating elements in conjunction with CSS animations powered by <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">-webkit-transition</span> or even HTML5 video tags.<br /><br />To get a sense of how much you can do with CSS filters, check out this interactive abstract <a href=\"http://cssfilters.appspot.com/\">painting app</a>.<br /><br /><div style=\"text-align: center;\"><b id=\"internal-source-marker_0.30067956587299705\" style=\"-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; color: black; font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\"><img height=\"277\" src=\"https://lh5.googleusercontent.com/6Pv97jDTndAOYV6d-tXhPhQqU2HJ86mHt3h4jP0vNAPrFa0SvZTfpx9RAMOIwq30Yg7B5lmbF8joIFpVmIJO8e7leO6gu6DtJVYDhIWfAtgRf8YNnog\" width=\"400\" /></b></div><br />For more info on CSS filters, including a full list of those available in Chromium and how to use them, check out the new<a href=\"http://www.html5rocks.com/en/tutorials/filters/understanding-css/\"> CSS Filter tutorial</a> on HTML5Rocks.<br /><br /><span class=\"post-author\">Posted by Stephen “Rose-Colored Glasses” White, Software Engineer </span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-3347903328869812110?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Changes to the Field Trials infrastructure",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-3822991944597642550",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-05-25T08:41:00.000-07:00",
	text: "<a href=\"https://www.google.com/search?q=yogi+berra\">In theory there’s no difference between theory and practice. In practice, there is</a>. That’s why we prefer to try <a href=\"http://googleblog.blogspot.com/2006/04/this-is-test-this-is-only-test.html\">new ideas out in the real world</a> and see which features actually helped users get where they want to go. In Chrome we call these tests Field Trials, and they’ve been part of every install steadily making Chrome better since day one. For example, Field Trials helped us improve our Omnibox pre-rendering by about 70 percent - making about 1 in 3 Omnibox navigations faster by a second or more.<br /><br />If you’re <a href=\"http://www.chromium.org/developers/core-principles\">contributing to  Chrome</a>, you should consider using Field Trials to help tune your features. Recently we’ve added infrastructure to help make designing and deploying these tests easier than ever. Field Trials will now have a regular update cycle similar to the one that delivers the newest version of Chrome to users, making it easier to rapidly release and retire new variations. We’ve also centralized the logic of which variations are active so that its easy for developers on M21 or higher to reset their variation state, using the --reset-variation-state command line flag. To learn more about variations of Chrome, check out <a href=\"https://src.chromium.org/viewvc/chrome/trunk/src/base/metrics/field_trial.h?view=markup\">Field Trials</a> at the Chromium project.<br /><br /> <span class=\"post-author\">Posted by Tyler Odean, Product Manager </span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-3822991944597642550?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "A Tale of Two Pwnies (Part 1)",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-4416998492526601334",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-05-22T12:03:00.000-07:00",
	text: "Just over two months ago, Chrome sponsored the <a href=\"http://blog.chromium.org/2012/02/pwnium-rewards-for-exploits.html\">Pwnium</a> browser hacking competition. We had <a href=\"http://chrome.blogspot.com/2012/03/pwnium-great-exploits-fast-patches.html\">two fantastic submissions</a>, and successfully blocked both exploits within 24 hours of their unveiling. Today, we’d like to offer an inside look into the exploit submitted by <a href=\"http://arstechnica.com/business/2012/03/googles-chrome-browser-on-friday/\">Pinkie Pie</a>.<br /><br />So, how does one get full remote code execution in Chrome? In the case of Pinkie Pie’s exploit, it took a chain of six different bugs in order to successfully break out of the Chrome sandbox.<br /><br />Pinkie’s first bug (<a href=\"http://code.google.com/p/chromium/issues/detail?id=117620\">117620</a>) used Chrome’s prerendering feature to load a <a href=\"https://developers.google.com/native-client/\">Native Client</a> module on a web page. <a href=\"https://developers.google.com/chrome/whitepapers/prerender\">Prerendering</a> is a performance optimization that lets a site provide hints for Chrome to fetch and render a page before the user navigates to it, making page loads seem instantaneous. To avoid sound and other nuisances from preloaded pages, the prerenderer blocks plug-ins from running until the user chooses to navigate to the page. Pinkie discovered that navigating to a pre-rendered page would inadvertently run all plug-ins—even Native Client plug-ins, which are otherwise permitted only for installed extensions and apps.<br /><br />Of course, getting a Native Client plug-in to execute doesn’t buy much, because the Native Client process’ sandbox is even more restrictive than Chrome’s sandbox for HTML content. What Native Client does provide, however, is a low-level interface to the <a href=\"http://www.chromium.org/developers/design-documents/gpu-command-buffer\">GPU command buffers</a>, which are used to communicate accelerated graphics operations to the GPU process. This allowed Pinkie to craft a special command buffer to exploit the following integer underflow bug (<a href=\"http://code.google.com/p/chromium/issues/detail?id=117656\">117656</a>) in the GPU command decoding:<br /><br /><div style=\"text-align: center;\"><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">static uint32 ComputeMaxResults(size_t size_of_buffer) {   return (size_of_buffer - sizeof(uint32)) / sizeof(T); } </span></div><br />The issue here is that if <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">size_of_buffer</span> is smaller than <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">sizeof</span>(<span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">uint32</span>), the result would be a huge value, which was then used as input to the following function:<br /><br /><div style=\"text-align: center;\"><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">static size_t ComputeSize(size_t num_results) {   return sizeof(T) * num_results + sizeof(uint32); } </span></div><br />This calculation then overflowed and made the result of this function zero, instead of a value at least equal to <span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">sizeof(uint32)</span>. Using this, Pinkie was able to write eight bytes of his choice past the end of his buffer. The buffer in this case is one of the GPU transfer buffers, which are mapped in both processes’ address spaces and used to transfer data between the Native Client and GPU processes. The Windows allocator places the buffers at relatively predictable locations; and the Native Client process can directly control their size as well as certain object allocation ordering. So, this afforded quite a bit of control over exactly where an overwrite would occur in the GPU process.<br /><br />The next thing Pinkie needed was a target that met two criteria: it had to be positioned within range of his overwrite, and the first eight bytes needed to be something worth changing. For this, he used the GPU buckets, which are another IPC primitive exposed from the GPU process to the Native Client process. The buckets are implemented as a <a href=\"http://en.wikipedia.org/wiki/Red%E2%80%93black_tree\">tree structure</a>, with the first eight bytes containing pointers to other nodes in the tree. By overwriting the first eight bytes of a bucket, Pinkie was able to point it to a fake tree structure he created in one of his transfer buffers. Using that fake tree, Pinkie could read and write arbitrary addresses in the GPU process. Combined with some predictable addresses in Windows, this allowed him to build a <a href=\"http://en.wikipedia.org/wiki/Return-oriented_programming\">ROP chain</a> and execute arbitrary code inside the GPU process.<br /><br />The GPU process is still sandboxed well below a normal user, but it’s not as strongly sandboxed as the Native Client process or the HTML renderer. It has some rights, such as the ability to enumerate and connect to the named pipes used by <a href=\"http://www.chromium.org/developers/design-documents/inter-process-communication\">Chrome’s IPC layer</a>. Normally this wouldn’t be an issue, but Pinkie found that there’s a brief window after Chrome spawns a new renderer where the GPU process could see the renderer’s IPC channel and connect to it first, allowing the GPU process to impersonate the renderer (<a href=\"http://code.google.com/p/chromium/issues/detail?id=117627\">bug 117627</a>).<br /><br />Even though Chrome’s renderers execute inside a stricter sandbox than the GPU process, there is a special class of renderers that have IPC interfaces with elevated permissions. These renderers are not supposed to be navigable by web content, and are used for things like extensions and settings pages. However, Pinkie found another bug (<a href=\"https://code.google.com/p/chromium/issues/detail?id=117417\">117417</a>) that allowed an unprivileged renderer to trigger a navigation to one of these privileged renderers, and used it to launch the extension manager. So, all he had to do was jump on the extension manager’s IPC channel before it had a chance to connect.<br /><br />Once he was impersonating the extensions manager, Pinkie used two more bugs to finally break out of the sandbox. The first bug (<a href=\"http://code.google.com/p/chromium/issues/detail?id=117715\">117715</a>) allowed him to specify a load path for an extension from the extension manager’s renderer, something only the browser should be allowed to do. The second bug (<a href=\"http://code.google.com/p/chromium/issues/detail?id=117736\">117736</a>) was a failure to prompt for confirmation prior to installing an unpacked <a href=\"http://code.google.com/chrome/extensions/npapi.html\">NPAPI plug-in extension</a>. With these two bugs Pinkie was able to install and run his own NPAPI plug-in that executed outside the sandbox at full user privilege.<br /><br />So, that’s the long and impressive path Pinkie Pie took to crack Chrome. All the referenced bugs were fixed some time ago, but some are still restricted to ensure our users and Chromium embedders have a chance to update. However, we’ve included links so when we do make the bugs public, anyone can investigate in more detail.<br /><br />In an upcoming post, we’ll explain the details of Sergey Glazunov’s exploit, which relied on roughly 10 distinct bugs. While these issues are already fixed in Chrome, some of them impact a much broader array of products from a range of companies. So, we won’t be posting that part until we’re comfortable that all affected products have had an adequate time to push fixes to their users.<br /><span class=\"post-author\"><br /></span><br /><span class=\"post-author\">Posted by Jorge Lucangeli Obes and Justin Schuh, Software Engineers </span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-4416998492526601334?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Connect with Web Intents",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-9024980817440542046",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-05-15T13:35:00.001-07:00",
	text: "Last year we <a href=\"http://blog.chromium.org/2011/08/connecting-web-apps-with-web-intents.html\">proposed the Web Intents API</a> to help web applications integrate with one another with minimal effort. We've now enabled an experimental version of the API in the most recent <a href=\"http://google.com/chrome\">stable version of Chrome</a>, to gather feedback from the web community and shape the future of the Web Intents API.<br /><br /><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/KLCQ3BxBWvU\" width=\"560\"></iframe><br /><br />This prototype version of Web Intents makes it easier for developers to try out the API and experience its benefits first hand:<br /><ul><li>Developers who build client apps will be able to easily include functionality from other web services (e.g., photo editing). </li><li>Developers creating those services will no longer need to invest time and resources to negotiate and build hardcoded integrations - they can just focus on offering a great quality product with the integration facilitated by the API. </li></ul>In addition, this implementation of Web Intents can help the design discussions in the <a href=\"http://lists.w3.org/Archives/Public/public-web-intents/\">W3C web intents open standards list</a>. After all, it's impossible to build a complex API—especially one that requires an ecosystem of apps—without feedback from web developers using it in the wild.<br /><br />We expect that Web Intents will evolve significantly, potentially in backwards-incompatible ways, as <a href=\"https://groups.google.com/forum/?fromgroups#!forum/web-intents-discuss\">feedback</a> from real world usage trickles in. Because of its experimental status, the current live version is prefixed and only allows applications to register as services in their Chrome Web Store app manifest.<br /><br /><a href=\"http://2.bp.blogspot.com/-Ca8tDFNJ5UQ/T7K9Ya-XdXI/AAAAAAAAAZc/56fJw-UzHoI/s1600/noinstalls.PNG\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"221\" src=\"http://2.bp.blogspot.com/-Ca8tDFNJ5UQ/T7K9Ya-XdXI/AAAAAAAAAZc/56fJw-UzHoI/s320/noinstalls.PNG\" width=\"320\" /></a><br /><br />Once the API is stable, we plan to remove this restriction.<br /><br />To learn more on how to use the experimental Web Intents API check out the <a href=\"http://www.chromium.org/developers/web-intents-in-chrome\">Web Developers' Guide to Web Intents in Chrome</a>. If you choose to experiment with Web Intents, be sure to follow our <a href=\"https://groups.google.com/forum/?fromgroups#!forum/web-intents-discuss\">discussion group</a>, where we'll announce any impending breaking changes in Chrome's implementation.<br /><br /><span class=\"post-author\">Posted by James Hawkins, Software Engineer</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-9024980817440542046?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Better code optimization decisions for V8",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-5403267787218892001",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-05-01T11:31:00.000-07:00",
	text: "As of current dev and beta channel releases, V8 uses a new algorithm based on counters to decide which functions to optimize. This greatly increases performance for small JavaScript programs. For example, on the SunSpider benchmark, which focuses on extremely short-running tests, V8's speed improved by about 25%.<br /><br /><div class=\"separator\" style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/-aOuzIznqfec/T6B5niZudLI/AAAAAAAAAZQ/IoJvyESFq1U/s1600/v8_sunspider.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/-aOuzIznqfec/T6B5niZudLI/AAAAAAAAAZQ/IoJvyESFq1U/s1600/v8_sunspider.png\" /></a></div><br />When executing JavaScript, V8 at first compiles it to machine code with a very fast compiler that doesn't optimize the code it produces. V8 has a second, <a href=\"http://blog.chromium.org/2010/12/new-crankshaft-for-v8.html\">optimizing compiler</a> that generates much faster machine code, but takes much more time to do so, so it has to be used selectively. That's why V8 must try to predict which functions will benefit most from optimization, and carefully decide when to optimize them.<br /><br />In the past, V8 stopped once every millisecond to look at currently running functions, and eventually optimized them. For long-running programs, this worked great, but short-running programs often finished before they could benefit much from the optimizing compiler -- a single millisecond can be a long time to wait before optimizing! In addition, V8 often made different optimization decisions each time a JavaScript program ran, sometimes overlooking small but performance-critical functions.<br /><br />The new version of V8 makes earlier and more repeatable optimization decisions by analyzing the running program in more detail. It uses counters to keep track of how often JavaScript functions are called and loops are executed in a program, approximating the time spent inside each function. That way V8 is able to quickly gather fine-grained information about performance bottlenecks in a JavaScript program, and to make sure that the optimizing compiler's efforts are spent on those functions that deserve it most.<br /><br />The new algorithm is contained in the current beta channel releases -- go <a href=\"https://www.google.com/landing/chrome/beta/\">give it a spin</a> now!<br /><br /><span class=\"post-author\">Posted by Jakob Kummerow, Software Engineer</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-5403267787218892001?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Debugging Web Workers with Chrome Developer Tools",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-6110566169597287879",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-04-30T11:12:00.001-07:00",
	text: "Like with other multithreaded applications, debugging <a href=\"http://www.html5rocks.com/en/tutorials/workers/basics/\">Web Workers</a> may be a tricky task and having good instruments makes this process much easier. <a href=\"https://developers.google.com/chrome-developer-tools/\">Chrome Developer Tools</a> provides full debugging support for scripts running in both <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html#creating-a-dedicated-worker\">dedicated</a> and <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html#shared-workers-introduction\">shared</a> workers.<br /><br />You can now use the powerful Scripts, Timeline, Profiles and Console panels to develop Web Workers:<br /><br /><b id=\"internal-source-marker_0.11037543299607933\" style=\"-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; color: black; font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\"><img height=\"234\" src=\"https://lh3.googleusercontent.com/z5IDqoJmsKQKwIRJZiedFa_fJHaVHJKHp3vLH4bHvtZFhDbDVJxlkv7FEN6Zv8DUnQGqhedWjTFr_sYnqmjHPa6xtdYwdkIN0MjGhXA57gnudA0NIcg\" width=\"400\" /></b><br /><br />All dedicated workers running in the inspected page are listed in the Scripts panel, under the Workers section. Clicking on a worker URL will open a new Developer Tools window attached to the worker. If you need to debug a dedicated worker’s initialization, there is also an option to pause workers on start. This  will suspend the execution in all starting dedicated workers at the very first statement.<br /><br /><b id=\"internal-source-marker_0.11037543299607933\" style=\"-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; color: black; font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\"><img height=\"154px;\" src=\"https://lh4.googleusercontent.com/OM7gTAq30mHSpN3GJPkAxt0rtPkvghEZeNVvVWRimuydNt8KVP2whfEoZfb0Y-amAnBIBCCqLtq0M1j8odfKRJ_8eFJ6dyOifUhiBTyDBi9iITRItO0\" width=\"383px;\" /></b><br /><br />Shared workers are more independent than dedicated ones as they can be used concurrently by several pages. All running shared workers can be discovered through the <a href=\"chrome://inspect/\">chrome://inspect</a> page. Each shared worker listed there has inspect and terminate links next to its URL. These links  allow you to launch a Developer Tools window attached to that worker or terminate the worker respectively.<br /><br />When you need to debug a shared worker initialization, it is enough to terminate the current instance of the worker leaving the Developer Tools window open and reload one of the worker clients. The worker will restart and Developer Tools window will automatically re-attach to the new instance.<br /><br />To learn more on Developer Tools check out our <a href=\"http://code.google.com/chrome/devtools/docs/overview.html\">documentation</a> or ask us a question on <a href=\"https://plus.google.com/102860501900098846931/posts\">Google+</a> and our <a href=\"http://groups.google.com/group/google-chrome-developer-tools\">discussion group</a>.<br /><br /><span class=\"post-author\">Posted by Yury Semikhatsky, Software Engineer</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-6110566169597287879?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Fuzzing for Security",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-7943906459377037511",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-04-26T10:00:00.000-07:00",
	text: "Web browsers are big, complicated pieces of software that are extremely difficult to secure. In the case of Chrome, it’s an even more interesting challenge as we contend with a codebase that evolves at a blisteringly fast pace. All of this means that we need to move very quickly to keep up, and one of the ways we do so is with a scaled out <a href=\"http://en.wikipedia.org/wiki/Fuzz_testing\">fuzzing</a> infrastructure.<br /><br />Chrome’s fuzzing infrastructure (affectionately named \"ClusterFuzz\") is built on top of a cluster of several hundred virtual machines running approximately six-thousand simultaneous Chrome instances. ClusterFuzz automatically grabs the most current Chrome <a href=\"http://dev.chromium.org/developers/how-tos/get-the-code#TOC-LKGR\">LKGR (Last Known Good Revision)</a>, and hammers away at it to the tune of around fifty-million test cases a day. That capacity has roughly quadrupled since the system’s inception, and we plan to quadruple it again over the next few weeks.<br /><br />With that kind of volume, we’d be overloaded if we just automated the test case generation and crash detection. That’s why we’ve automated the entire fuzzing pipeline, including the following processes:<br /><br /><ul><li><b>Managing test cases and infrastructure</b> - To run at maximum capacity we need to generate a constant stream of test cases, distribute them across thousands of Chrome instances running on hundreds of virtual machines, and track the results.</li><li><b>Analyzing crashes</b> - The only crashes we care about for security purposes are the exploitable ones. So we use <a href=\"http://code.google.com/p/address-sanitizer/\">Address Sanitizer</a> to instrument our Chrome binaries and provide detailed reports on potentially exploitable crashes.</li><li><b>Minimizing test cases</b> - Fuzzer test cases are often very large files—usually as much as several hundred kilobytes each. So we take the generated test cases and distill them down to the few, essential pieces that actually trigger the crash.</li><li><b>Identifying regressions</b> - The first step in getting a crash fixed is figuring out where it is and who should fix it. So this phase tracks the crash down to the range of changes that introduced it.</li><li><b>Verifying fixes</b> - In order to verify when a crash is actually fixed, which we run the open crash cases against each new LKGR build.</li></ul><br />In addition to manageability, this level of scale and automation provides a very important additional benefit. By aggressively tracking the Chrome LKGR builds, ClusterFuzz is evolving into a real-time security regression detection capability. To appreciate just what that means, consider that ClusterFuzz has detected 95 unique vulnerabilities since we brought it fully online at the end of last year. In that time, 44 of those vulnerabilities were identified and fixed before they ever had a chance to make it out to a stable release. As we further refine our process and increase our scale, we expect potential security regressions in stable releases to become increasingly less common.<br /><br />Just like Chrome itself, our fuzzing work is constantly evolving and pushing the state of the art in both scale and techniques. In keeping with Chrome’s <a href=\"http://www.chromium.org/Home/chromium-security/core-principles\">security principles</a>, we’re helping to make the web safer by upstreaming the security fixes into projects we rely upon, like <a href=\"http://www.webkit.org/\">WebKit</a> and <a href=\"http://ffmpeg.org/\">FFmpeg</a>. As we expand and improve ClusterFuzz, users of those upstream projects will continue to benefit.<br /><br /><span class=\"post-author\">Posted by Abhishek Arya and Cris Neckar, Chrome Security Team</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-7943906459377037511?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Register now for the global Dart hackathon",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-5316409226701733059",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-04-16T10:30:00.000-07:00",
	text: "The Dart team invites you to the first global Dart hackathon, a collaboration between the Dart team and the developer community. <a href=\"http://www.dartlang.org/hackathons/2012/happy-hour/\">Sign up</a> and have fun hacking on Dart to build modern client and server side web apps and libraries.   Current hackathon locations include: <br /><ul><li>North America:</li><ul><li>Silicon Valley, California, USA</li></ul><li>South America:</li><ul><li>São Paulo, Brazil</li></ul><li>Europe and Middle East:</li><ul><li>London, England</li><li>Prague, Czech Republic</li><li>Tel Aviv, Israel</li></ul><li>Asia:</li><ul><li>Bacolod City, Philippines</li><li>Chandigarh, India</li><li>Goa, India</li><li>Karnataka, India</li><li>Manipal, India</li><li>New Delhi, India</li><li>Seoul, Korea</li><li>Tokyo, Japan</li></ul></ul>Hackathon dates vary by location. Check out the <a href=\"http://www.dartlang.org/hackathons/2012/happy-hour/\">full list</a> for the schedule.  <a href=\"http://www.dartlang.org/\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img alt=\"\" src=\"http://2.bp.blogspot.com/-dpHSCwbhygA/T4xME8OcJOI/AAAAAAAABUw/8_vB5q96K20/s1600/image00.png\" style=\"border-bottom-style: none; border-color: initial; border-left-style: none; border-right-style: none; border-top-style: none; border-width: initial; text-align: center;\" width=\"70\" /></a> The <a href=\"http://www.dartlang.org/\">Dart project</a> is still in technology preview, which means you’ll be hacking on early access code, but that’s all part of the fun. We’re eager to see what you build, and we hope you can make it. <a href=\"http://www.dartlang.org/hackathons/2012/happy-hour/\">Register today</a>!<br /><br /><span class=\"post-author\"><br /></span><br /><span class=\"post-author\">Posted by Seth Ladd, Developer Advocate</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-5316409226701733059?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Chrome’s WebRTC roadmap",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-6819801349693238749",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-04-10T11:05:00.000-07:00",
	text: "Last January, Chrome was the first major browser to <a href=\"http://blog.chromium.org/2012/01/real-time-communications-in-chrome.html\">preview WebRTC</a>, HTML5's new real time audio and video stack. Since then, we've been hard at work keeping up with the evolving specification, fixing bugs and listening to  the web community’s feedback.<br /><br />The main parts of the WebRTC specification are now stable and are coming soon to all 200M+ Chrome users. With this blog post, we want to help developers plan for what will be introduced in this first stable release later this year.<br /><br /><b>What's in:</b><br /><br /><b>JSEP</b><br /><a href=\"http://tools.ietf.org/html/draft-ietf-rtcweb-jsep-00\">JSEP</a> (Javascript Session Establishment Protocol) is an API for signaling that allows for much more powerful apps and flexibility in choice of signaling protocols. To abstract the complexity, we provide and maintain a <a href=\"http://code.google.com/p/webrtc-samples/source/browse/#svn%2Ftrunk%2Froap-jsep\">Javascript lib</a> that makes browser to browser calls a few lines of Javascript.<br /><br /><b>Topologies</b><br />Our implementation will support multiple independent PeerConnections, each capable of sending and receiving multiple independent media sources.<br /><br /><b>ICE / STUN / TURN</b><br /><a href=\"http://tools.ietf.org/html/rfc5245\">ICE and STUN</a> are standardized methods for establishing a peer-to-peer connection on the Internet, even if the two end points are behind private network addresses (NAT). Chrome’s current stack deviates from the official current standards. We are working to fix this.<br /><br />We will also support TURN servers to allow connections through tougher firewalls, where relaying and encapsulation are needed. Exactly what type of TURN will be supported is TBD.<br /><br /><b>DTLS-SRTP </b><br />Encryption will be mandatory for all usage of WebRTC in Chrome. For our first stable release, we will implement <a href=\"http://tools.ietf.org/html/draft-ietf-avt-dtls-srtp-07\">DTLS-SRTP</a>.<br /><br /><b>VP8, iSAC, iLBC, G.711</b><br />The video codec support by Chrome will be VP8. We've made several major improvements inside and around VP8 to ensure it can deliver a great real time experience. On the audio side, we will initially support iSAC, iLBC, G.711, and DTMF, with iSAC being the default. It is a royalty free wideband codec optimized for speech, open sourced at webrtc.org.<br /><br /><b>What’s next?</b><br /><br />More functionality and features will appear in future versions of Chrome. We’ll work on prioritizing them once we get the basics right:<br /><ul><li><b>Data API</b>. Implementation will start once the network stack is ready. </li><li><b>Screen sharing</b>. </li><li><b>PeerConnection proxying</b>. The ability to relay a stream to a third party will not make our first version. </li><li><b>Recording</b>. MediaRecorder specification work has not been completed yet.</li></ul>Comments, questions, kudos or tomatoes? Let us know on our <a href=\"https://groups.google.com/group/discuss-webrtc\">discussion list</a>.<br /><br /><span class=\"post-author\">Posted by Serge Lachapelle, Product Manager</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-6819801349693238749?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Moar better graphics",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-1172334584130213889",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-03-28T10:50:00.000-07:00",
	text: "The latest Stable channel release of Chrome brings improvements to both <a href=\"http://dev.w3.org/html5/2dcontext/\">Canvas2D</a>’s speed and <a href=\"http://en.wikipedia.org/wiki/WebGL\">WebGL</a>’s reach.<br /><br />We’ve enabled GPU-accelerated Canvas2D on capable Windows and Mac computers, which should make web applications like games perform even better than a pure software implementation. GPU-accelerated Canvas2D has previously been enabled in the Beta channel for quite some time, so hopefully developers have had a chance to try it out. We’re continuing to make improvements and tweaks to our Canvas2D implementation, so please file a bug in our public issue tracker if you encounter problems.<br /><br />WebGL enables compelling 3D content on the web, so we want to ensure that as many users as possible have access to this technology. That’s why we’ve enabled <a href=\"http://transgaming.com/business/swiftshader\">SwiftShader</a>, a software rasterizer licensed from our friends at TransGaming, for users with older configurations. Keep in mind that a software-backed WebGL implementation is never going to perform as well as one running on a real GPU, but now more users will have access to basic 3D content on the web. See our previous <a href=\"http://blog.chromium.org/2012/02/gpu-accelerating-2d-canvas-and-enabling.html\">blog post</a> for more details on SwiftShader and how to try it out.<br /><br /><span class='post-author'>Posted by John \"More CPU in Your GPU\" Bauman and Brian \"FPS\" Salomon</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-1172334584130213889?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Inline installation for your apps and extensions",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-2491629896533462957",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-03-19T10:14:00.000-07:00",
	text: "Over the past several months, the number of daily app and extensions downloads from the <a href=\"http://www.blogger.com/chrome.google.com/webstore\">Chrome Web Store</a> has more than doubled. We are now seeing millions of downloads per day. Some apps and extensions have grown even faster thanks to <a href=\"http://code.google.com/chrome/webstore/docs/inline_installation.html\">inline installation</a>, a feature we launched a few months ago.<br /><br />With inline installation, you can allow Chrome users who visit your web site to install your apps and extensions directly without requiring them to visit the Chrome Web Store. This creates a smoother experience for your users as it eliminates an extra step where potential users could drop off.<br /><br />Here are a few examples of the impact of inline installation:<br /><ul><li>Chrome extensions <a href=\"https://chrome.google.com/webstore/detail/iooicodkiihhpojmmeghjclgihfjdjhj\">Evernote Clearly</a> and <a href=\"https://chrome.google.com/webstore/detail/pioclpoplcdbaefihamjohnefbikjilc\">Evernote Web Clipper</a> derive 15% and 25% of their Chrome installations (respectively) from their inline installation implementation </li><li>Rovio implemented inline installation for their <a href=\"https://chrome.google.com/webstore/detail/aknpkdffaafgjchaibgeefbgmgeghloj\">Angry Birds Chrome</a> game and saw their install rate jump by almost 10%) </li><li><a href=\"https://chrome.google.com/webstore/detail/blhkmpdhinjbdjgenhpkcnnbeaajcnkf\">Equire</a>, a CRM extension that integrates with Gmail, saw a 66% increase in Chrome user retention after they implemented inline installation. </li></ul><ul><a href=\"http://2.bp.blogspot.com/-S_9IRTBPeh8/T2dnSC7IHTI/AAAAAAAAAYY/XYhg06bYLiI/s1600/Screen+shot+2012-03-15+at+11.00.24+AM.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"138\" src=\"http://2.bp.blogspot.com/-S_9IRTBPeh8/T2dnSC7IHTI/AAAAAAAAAYY/XYhg06bYLiI/s320/Screen+shot+2012-03-15+at+11.00.24+AM.png\" width=\"320\" /></a><i><br /></i><br /><i>Example: Installing Evernote Web Clipper from Evernote’s Site</i></ul>Implementing inline installation is very easy:<br /><div><ol><li>Provide a link to your Chrome Web Store item.</li><li>Write some script to check for whatever client-side capabilities your app requires (support for WebGL, the Web Audio API, etc). <a href=\"http://www.modernizr.com/\">Modernizr</a> is a great library to use for this. </li><li>Call a JavaScript function to initiate the install process. </li></ol>The user sees the same Add To Chrome dialog prompt that they would on the store, confirm the install, and they're done – all without leaving your site.</div><div><br /></div><div>The full details and documentation for using inline installation can be found <a href=\"http://code.google.com/chrome/webstore/docs/inline_installation.html\">here</a>. If you have any questions, you can reach us on our <a href=\"http://groups.google.com/a/chromium.org/group/chromium-apps/topics\">developer forum</a>.<br /><br /></div><span class=\"post-author\">Posted by Joe Marini, Developer Advocate </span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-2491629896533462957?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Chrome@GDC Recap",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-5249230408983105170",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-03-16T12:25:00.000-07:00",
	text: "Last week, the Chrome team participated in the <a href=\"http://www.gdconf.com/\">Game Developers Conference</a> in San Francisco. We all enjoyed talking to attendees about how game developers can benefit from the latest browser technologies such as <a href=\"http://gonacl.com/\">Native Client</a> and HTML5.<br /><br />For those of you who were not able to attend, we recorded videos of our talks. Check them out and let us know what you think.<br /><br /> <iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/videoseries?list=PL0803CD315D85ED5E&hl=en_US\" width=\"560\"></iframe><br /><br />During GDC, several developers presented some new and upcoming games for the Chrome Web Store. From <a href=\"https://chrome.google.com/webstore/detail/hdahlabpinmfcemhcbcfoijcpoalfgdn\">AirMech</a> to the highly anticipated <a href=\"http://www.youtube.com/watch?v=igNSaYnx28Y&feature=relmfu\">From Dust</a>, these games provided a sneak peek to the future of browser-based games.<br /><br />Besides being able to use the latest technology the web has to offer, creating a game for Chrome means you can distribute and monetize your game successfully. This is evidenced by our <a href=\"http://www.google.com/intl/en/landing/chrome/webstore/create/success-stories.html\">4 brand new case studies</a> with Kabam, Hlafbrick, Game Salad, and Limex Games.<br /><br />To learn how you too can develop games for Chrome, start by visiting our <a href=\"https://developers.google.com/games/web\">game developer site</a>.<br /><span class=\"post-author\"><br /></span><br /><span class=\"post-author\">Posted by Christian Stefansen, Product Manager </span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-5249230408983105170?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "V8 Benchmark Suite extended with physics simulation",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-5989889625971218441",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-03-15T12:49:00.000-07:00",
	text: "Today we are releasing version 7 of the <a href=\"http://v8.googlecode.com/svn/data/benchmarks/current/run.html\">V8 Benchmark Suite</a>. This new version adds <a href=\"http://nerget.com/fluidSim/\">Oliver Hunt’s</a> 2D <a href=\"http://en.wikipedia.org/wiki/Navier%E2%80%93Stokes_equations\">Navier-Stokes</a> fluid dynamic simulation, which stresses intense double array computations. These complex double array computations are today common in games, graphic and scientific applications.<br /><br />The new test shows the recent improvements V8 has made in handling advanced physics computations: the current <a href=\"https://www.google.com/landing/chrome/beta/\">Chrome 18</a> (today in beta) delivers a 5% score improvement compared to the current Chrome 17. <a href=\"http://tools.google.com/dlpage/chromesxs\">Chrome 19</a> (today in canary), where the full set of improvements is being released, delivers a whopping 25% score improvement compared to Chrome 17.<br /><br /><a href=\"http://1.bp.blogspot.com/-uzTHO7aBPu8/T2I6CFscO0I/AAAAAAAAAYM/vRa-XBv0zVw/s1600/Screen+shot+2012-03-15+at+11.50.13+AM.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"205\" src=\"http://1.bp.blogspot.com/-uzTHO7aBPu8/T2I6CFscO0I/AAAAAAAAAYM/vRa-XBv0zVw/s320/Screen+shot+2012-03-15+at+11.50.13+AM.png\" width=\"320\" /></a><br /><br />With these additions, the V8 Benchmark Suite is now a more comprehensive collection of eight tests, including OS kernel simulation, crypto and string operations, memory management stress-tests, and as of today, double array computations.<br /><br />We plan to keep updating the suite by adding more tests. These updates are a reflection of Chrome’s commitment to keep pushing the boundaries of speed, optimizing the engine for today’s more demanding web apps.<br /><br /><span class=\"post-author\">Posted by Stefano Cazzulani, Product Manager</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-5989889625971218441?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Meet the Web Platform Again for the First Time",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-6358572609053432447",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-03-13T07:00:00.000-07:00",
	text: "A few weeks ago one of my developer friends was gushing about the capabilities of his favorite native platform. After every point I felt obliged to point out that the web platform either already had or was actively developing precisely the same capabilities—and then some. He was incredulous. \"Prove it,\" he said.<br /><br />So I pulled together a few of my favorite examples from the cutting edge of the web platform and recorded three screencasts to help my friend—and others—meet the web platform again for the first time.<br /><br />The first video, Building on Foundations, goes over how the web platform has been fixing various historical shortcomings and building upon its core strengths, like complicated graphical effects, composability, and advanced text layout.<br /><br /><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/3i4dtgh3ym0\" width=\"560\"></iframe><br /><br />The next video, Learning from Other Platforms, reviews how the web platform offers new capabilities inspired by successes on other platforms with things like push notifications, payment APIs, and web intents.<br /><br /><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/mRd2SAL0vT4\" width=\"560\"></iframe><br /><br />The last video, On the Cutting Edge, demonstrates some of the new tricks the web platform is learning, like webcam access, powerful audio APIs, and complicated 3D graphics.<br /><br /><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/PNzmXDa1JLA\" width=\"560\"></iframe><br /><br />If you're interested in learning more about the technology behind any of the demos, check out the Meet the Web Platform <a href=\"http://www.chromium.org/developers/meet-the-web-platform-companion\">companion guide</a>.<br /><br />I hope these videos capture your imagination and begin to show what is possible on the web platform. The web platform is evolving at an enormous pace, and I just can't wait to see where it goes next!<br /><br /><span class=\"post-author\">Posted by Alex Komoroske, Product Manager</span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-6358572609053432447?l=blog.chromium.org' alt='' /></div>"
})

FeedItem.create({
	title: "Game On",
	id: "tag:blogger.com,1999:blog-2471378914199150966.post-4995786878802652993",
	publication_name: "Chromium Blog",
	author: "Google Chrome Blog",
	date: "2012-03-05T09:19:00.000-08:00",
	text: "Hundreds of millions play games on the web everyday - including most of us on the Chrome team. Between building new virtual cities and slaying dragons, we’re also working on making the web a better platform for game developers. With <a href=\"http://www.gdconf.com/\">GDC</a> about to start, we wanted to give you a quick update on these efforts.<br /><br />First, we’re collaborating with all browser vendors to give you access to exciting new HTML5 APIs such as <a href=\"https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html\">Gamepad</a>, <a href=\"http://dvcs.w3.org/hg/pointerlock/raw-file/default/index.html\">Mouse Lock</a> and <a href=\"http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html\">Fullscreen</a>. These can help you create more immersive experiences for your users.<br /><br />Second, <a href=\"http://gonacl.com/\">Native Client</a> continues to gain momentum. Today, the <a href=\"http://www.blitzgamesstudios.com/blitztech/\">BlitzTech Gaming engine</a> and the <a href=\"http://www.havok.com/products/physics\">Havok Physics Engine</a> announced support for Native Client, enriching an <a href=\"https://developers.google.com/native-client/pepper16/community/middleware\">ecosystem</a> that includes Unity, Moai, Bullet and other leading middleware providers. Already many game developers have been using NaCl to bring their games to Chrome’s hundreds of millions of users including brand new titles from <a href=\"http://www.ubi.com/\">Ubisoft</a>, <a href=\"http://carbongames.com/\">Carbon Games</a>, <a href=\"http://www.spacetimestudios.com/\">Spacetime Studios</a>, <a href=\"http://www.fuzzycubesoftware.com/\">FuzzyCube Software</a>, <a href=\"http://kleientertainment.com/\">Klei Entertainment</a> and <a href=\"http://www.firehosegames.com/\">Fire Hose Games</a>.<br /><br />Third, we’re working closely with other teams at Google to improve and simplify distribution and monetization for game developers. All games in the <a href=\"http://chrome.google.com/webstore\">Chrome Web Store</a> now have access to an improved <a href=\"https://developers.google.com/in-app-payments/\">In-App Payments solution</a> that <a href=\"http://googlecommerce.blogspot.com/2012/03/making-it-even-easier-to-monetize-your.html\">includes</a> support for more currencies and an optimized payment flow. This includes all Google+ games that will soon be listed in the store.<br /><br />To learn more on how you can also benefit from the emergence of the browser as a game platform, visit us at <a href=\"http://developers.google.com/games\">developers.google.com/games</a>. And if you are attending GDC this week, come and say hi.<br /><br /><span class=\"post-author\">Posted by Christian Stefansen, Product Manager </span><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2471378914199150966-4995786878802652993?l=blog.chromium.org' alt='' /></div>"
})
